Index: OgreMain/include/OgreRenderSystem.h
===================================================================
--- OgreMain/include/OgreRenderSystem.h	(revision 8208)
+++ OgreMain/include/OgreRenderSystem.h	(working copy)
@@ -630,8 +630,12 @@
 		/** Sets the texture coordinate transformation matrix for a texture unit.
 		@param unit Texture unit to affect
 		@param xform The 4x4 matrix
+        @param numTexCoords Provides a hint to the RenderSystem for the number of texture coordinates that are used in the transformation.
+        Pass 0 to let the RenderSystem handle it automatically.
+        @param numPassedTexCoords Provides a hint to the RenderSystem for the number of resulting texture coordinates that are passed to the rasterizer.
+        Pass 0 to let the RenderSystem handle it automatically.
 		*/
-		virtual void _setTextureMatrix(size_t unit, const Matrix4& xform) = 0;
+		virtual void _setTextureMatrix(size_t unit, const Matrix4& xform, size_t numTexCoords = 0, size_t numPassedTexCoords = 0) = 0;
 
 		/** Sets the global blending factors for combining subsequent renders with the existing frame contents.
 		The result of the blending operation is:</p>
Index: RenderSystems/Direct3D10/include/OgreD3D10RenderSystem.h
===================================================================
--- RenderSystems/Direct3D10/include/OgreD3D10RenderSystem.h	(revision 8208)
+++ RenderSystems/Direct3D10/include/OgreD3D10RenderSystem.h	(working copy)
@@ -273,7 +273,7 @@
         void _setTextureAddressingMode(size_t stage, const TextureUnitState::UVWAddressingMode& uvw);
         void _setTextureBorderColour(size_t stage, const ColourValue& colour);
 		void _setTextureMipmapBias(size_t unit, float bias);
-		void _setTextureMatrix( size_t unit, const Matrix4 &xform );
+		void _setTextureMatrix( size_t unit, const Matrix4 &xform, size_t numTexCoords, size_t numPassedTexCoords );
 		void _setSceneBlending( SceneBlendFactor sourceFactor, SceneBlendFactor destFactor );
 		void _setSeparateSceneBlending( SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha );
 		void _setAlphaRejectSettings( CompareFunction func, unsigned char value, bool alphaToCoverage );
Index: RenderSystems/Direct3D10/src/OgreD3D10RenderSystem.cpp
===================================================================
--- RenderSystems/Direct3D10/src/OgreD3D10RenderSystem.cpp	(revision 8208)
+++ RenderSystems/Direct3D10/src/OgreD3D10RenderSystem.cpp	(working copy)
@@ -1478,7 +1478,7 @@
 	*/
 	}
 	//---------------------------------------------------------------------
-	void D3D10RenderSystem::_setTextureMatrix( size_t stage, const Matrix4& xForm )
+	void D3D10RenderSystem::_setTextureMatrix( size_t stage, const Matrix4& xForm, size_t numTexCoords, size_t numPassedTexCoords )
 	{
 		mFixedFuncProgramsParameters.setTextureMatrix(stage, xForm);
 	/*	HRESULT hr;
Index: RenderSystems/Direct3D9/include/OgreD3D9RenderSystem.h
===================================================================
--- RenderSystems/Direct3D9/include/OgreD3D9RenderSystem.h	(revision 8208)
+++ RenderSystems/Direct3D9/include/OgreD3D9RenderSystem.h	(working copy)
@@ -252,7 +252,7 @@
         void _setTextureAddressingMode(size_t stage, const TextureUnitState::UVWAddressingMode& uvw);
         void _setTextureBorderColour(size_t stage, const ColourValue& colour);
 		void _setTextureMipmapBias(size_t unit, float bias);
-		void _setTextureMatrix( size_t unit, const Matrix4 &xform );
+		void _setTextureMatrix( size_t unit, const Matrix4 &xform, size_t numTexCoords, size_t numPassedTexCoords );
 		void _setSceneBlending( SceneBlendFactor sourceFactor, SceneBlendFactor destFactor );
 		void _setSeparateSceneBlending( SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha );
 		void _setAlphaRejectSettings( CompareFunction func, unsigned char value, bool alphaToCoverage );
Index: RenderSystems/Direct3D9/src/OgreD3D9RenderSystem.cpp
===================================================================
--- RenderSystems/Direct3D9/src/OgreD3D9RenderSystem.cpp	(revision 8208)
+++ RenderSystems/Direct3D9/src/OgreD3D9RenderSystem.cpp	(working copy)
@@ -1814,7 +1814,7 @@
 		}
 	}
 	//---------------------------------------------------------------------
-	void D3D9RenderSystem::_setTextureMatrix( size_t stage, const Matrix4& xForm )
+	void D3D9RenderSystem::_setTextureMatrix( size_t stage, const Matrix4& xForm, size_t numTexCoords, size_t numPassedTexCoords )
 	{
 		HRESULT hr;
 		D3DXMATRIX d3dMat; // the matrix we'll maybe apply
@@ -1938,7 +1938,9 @@
 				be determine by texture coordinate vertex element. Now, just trust
 				user supplied texture type matchs texture coordinate vertex element.
 				*/
-				if (mTexStageDesc[stage].texType == D3D9Mappings::D3D_TEX_TYPE_NORMAL)
+                // FIXME: Should the matrix be changed for numTexCoords == 1 ?
+				if (numTexCoords == 2 ||
+                    (numTexCoords == 0 && mTexStageDesc[stage].texType == D3D9Mappings::D3D_TEX_TYPE_NORMAL))
 				{
 					/* It's 2D input texture coordinate:
 
@@ -1988,16 +1990,37 @@
 			}
 			else
 			{
-				switch (mTexStageDesc[stage].texType)
-				{
-				case D3D9Mappings::D3D_TEX_TYPE_NORMAL:
-					texCoordDim = D3DTTFF_COUNT2;
-					break;
-				case D3D9Mappings::D3D_TEX_TYPE_CUBE:
-				case D3D9Mappings::D3D_TEX_TYPE_VOLUME:
-					texCoordDim = D3DTTFF_COUNT3;
-					break;
-				}
+                if (numPassedTexCoords == 0)
+                {
+				    switch (mTexStageDesc[stage].texType)
+				    {
+				    case D3D9Mappings::D3D_TEX_TYPE_NORMAL:
+					    texCoordDim = D3DTTFF_COUNT2;
+					    break;
+				    case D3D9Mappings::D3D_TEX_TYPE_CUBE:
+				    case D3D9Mappings::D3D_TEX_TYPE_VOLUME:
+					    texCoordDim = D3DTTFF_COUNT3;
+					    break;
+				    }
+                }
+                else
+                {
+                    switch (numPassedTexCoords)
+                    {
+                    case 1:
+                        texCoordDim = D3DTTFF_COUNT1;
+                        break;
+                    case 2:
+                        texCoordDim = D3DTTFF_COUNT2;
+                        break;
+                    case 3:
+                        texCoordDim = D3DTTFF_COUNT3;
+                        break;
+                    default:
+                        texCoordDim = D3DTTFF_COUNT4;
+                        break;
+                    }
+                }
 			}
 
 			hr = __SetTextureStageState( stage, D3DTSS_TEXTURETRANSFORMFLAGS, texCoordDim );
Index: RenderSystems/GL/include/OgreGLRenderSystem.h
===================================================================
--- RenderSystems/GL/include/OgreGLRenderSystem.h	(revision 8208)
+++ RenderSystems/GL/include/OgreGLRenderSystem.h	(working copy)
@@ -286,7 +286,7 @@
         /** See
           RenderSystem
          */
-        void _setTextureMatrix(size_t stage, const Matrix4& xform);
+        void _setTextureMatrix(size_t stage, const Matrix4& xform, size_t numTexCoords, size_t numPassedTexCoords);
         /** See
           RenderSystem
          */
Index: RenderSystems/GL/src/OgreGLRenderSystem.cpp
===================================================================
--- RenderSystems/GL/src/OgreGLRenderSystem.cpp	(revision 8208)
+++ RenderSystems/GL/src/OgreGLRenderSystem.cpp	(working copy)
@@ -1600,7 +1600,7 @@
 
 	}
 	//-----------------------------------------------------------------------------
-	void GLRenderSystem::_setTextureMatrix(size_t stage, const Matrix4& xform)
+	void GLRenderSystem::_setTextureMatrix(size_t stage, const Matrix4& xform, size_t numTexCoords, size_t numPassedTexCoords)
 	{
 		if (stage >= mFixedFunctionTextureUnits)
 		{
